buildscript {
	ext {
		kotlinVersion = '1.1.1'
		springBootVersion = '1.5.2.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
		classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
	}
}

subprojects {

	apply plugin: 'kotlin'
	apply plugin: 'eclipse'

	version = '0.0.1-SNAPSHOT'
	sourceCompatibility = 1.8

	ext {
		wicketVersion = '8.0.0-M4'
		wicketstuffVersion = wicketVersion
		wicketBootstrapVersion = '2.0.0-M2'
        servletApiVersion = '3.1.0'
	}

	compileKotlin {
		kotlinOptions.jvmTarget = sourceCompatibility
	}
	compileTestKotlin {
		kotlinOptions.jvmTarget = sourceCompatibility
	}

	repositories {
		mavenCentral()
	}

	dependencies {
		compileOnly("org.apache.wicket:wicket-core:${wicketVersion}")
        compileOnly("javax.servlet:javax.servlet-api:${servletApiVersion}")
		compile("org.jetbrains.kotlin:kotlin-stdlib-jre8:${kotlinVersion}")
		compile("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")
	}

}

project(':sample') {

    apply plugin: 'kotlin-allopen'
    apply plugin: 'kotlin-spring'
	apply plugin: 'org.springframework.boot'

    sourceSets.main.resources.srcDir 'src/main/kotlin'

    dependencies {
        compile("org.apache.wicket:wicket-core:${wicketVersion}")
		compile("org.apache.wicket:wicket-devutils:${wicketVersion}")
        compile("javax.servlet:javax.servlet-api:${servletApiVersion}")
        compile("org.springframework.boot:spring-boot-starter-web:${springBootVersion}")
        compile("de.agilecoders.wicket:wicket-bootstrap-core:${wicketBootstrapVersion}")
		compile("org.wicketstuff:wicketstuff-annotation:${wicketstuffVersion}")
        compile project(':kwicket')
    }
}